# -*- coding: utf-8 -*-
"""
Created on Wed Sep 30 17:35:32 2015

2D Sierpinski Carpet
@author: Dan Goldsmith & Dan Locke
"""
import numpy as np
np.set_printoptions(threshold=np.nan)
from numpy import linalg
from scipy import sparse
import SP3rdFn as SPfn

# c and r must be 3^m
m = 2
a = 1
no_iterations = 1                 # from 0->4
UseSparseMatrices = False
qcf = SPfn.QC(m,a,no_iterations)      # create object
qcf.CreateMap()                         # find which points lie inside
qcf.plotMap()
qcf.createEmap()

for j in range (1,qcf.r+1):
    for i in range(1,qcf.c+1):
        print(qcf.emap[qcf.I(i,j)-1])
    print('\n')

H,Hs = qcf.genMatrix3(False)
#print(H)

if UseSparseMatrices == True:
    k = 10
    w, v = sparse.linalg.eigsh(H, k,which='SM')
if UseSparseMatrices == False:
    w, v = linalg.eigh(H)

# enumerate list and sort by eigenvalues, return index of relevant energy level; m labels mth energy level (in sorted list of energies)

X, Y = np.meshgrid(qcf.xt, qcf.yt)


for m in range(0,1):    
    state_ind = sorted(enumerate(w), key=lambda x: x[1])[m][0]
    z = qcf.arrayFromZ(v[:,state_ind], qcf.xt, qcf.yt)
#    qcf.plot2Dpsi(X,Y,z,m)
    qcf.plotContour(X,Y,z,m)

# n=len(w)
# nt = np.linspace(1,n,n)
# E = sorted(w/2)
# qcf.plotEnergies(nt, E)
# polyN = np.poly1d(np.polyfit(E, nt, 5))
# qcf.plotN(E, polyN,nt)


# # Limit plot to linear + interesting region
# sym_type='oo'
# n = len(w)
# top = n-1#int(3*n/8) #as only computed 'valid' eigs
# bottom = int(n/2)
# print('Total number of points in stadium: {}'.format(n))
# print('Points taken in the range {} : {}'.format(bottom, top))
# nt = np.linspace(bottom,top,top-bottom+1)
# redE = E[bottom:(top+1)]
# redPolyN = np.poly1d(np.polyfit(redE, nt, 5))
# qcf.plotN(redE, redPolyN,nt)
# qcf.plotPolyN(nt, redPolyN, redE)
# qcf.plotDelta(nt, redPolyN, redE, sym_type)

# # Delta-3 Statistic
# delta3 = qcf.delta3(redE, nt, redPolyN)
# qcf.plotDelta3(delta3)
# comp_time = (time.clock()-t0)/60.0
# print("TIME TO COMPUTE: %f mins" %comp_time)
