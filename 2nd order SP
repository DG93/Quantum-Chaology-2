# -*- coding: utf-8 -*-
"""
Created on Wed Sep 30 17:35:32 2015

2D infinite potential wells
@author: Dan Goldsmith & Dan Locke
"""
import numpy as np
import scipy.sparse.linalg as sp
from numpy import linalg
import SP2ndFn as qcf

Sparseflag = False
no_iterations = 3
m = 4
c = 3**m #int(input("Enter number of points in x axis: "))
r = c #int(input("Enter number points in y axis: "))
a = 1 #float(input("Enter width (x axis) of well: "))
b=a #float(input("Enter depth (y axis) of well: "))
x=a*c # spacing in x axis
y=b*r # spacing in y axis
xt = np.linspace(0,x,c)
yt = np.linspace(0,y,r)
X,Y = np.meshgrid(xt, yt)
xmap=[]
ymap=[]
C=[]
emap=[]
xymap=[]
iterations = (-m) + no_iterations
iterations_label = no_iterations
    
C,xmap,ymap,xymap=qcf.CreateMap5(r,c,iterations,xymap)
emap = qcf.createEmap(xmap,ymap,r,c,C,xymap)

qcf.plotMap(xmap,ymap)

W,Ws=qcf.genMatrix5(xmap,ymap,emap,C,c,xmap,ymap,xymap,Sparseflag)

if Sparseflag == False:
    w, v = linalg.eig(W)
    w2=[]
    for i in range(0,len(w)):
        if w[i]!=0: w2.append(w[i])
    w=w2
if Sparseflag == True:
    wt, vt = linalg.eig(W)
    k = 10
    state_ind_t = sorted(enumerate(wt), key=lambda x: x[1])[0][0]
    zero=vt[:,state_ind_t]
    w, v = sp.eigsh(Ws,k,which='SM')#,v0=zero)

for m in range(0,1):
    state_ind = sorted(enumerate(w), key=lambda x: x[1])[m][0]
    z = qcf.arrayFromZ5(v[:,state_ind], c, r, C, xt, yt, xymap)
    qcf.plot2Dpsi(X,Y,z)
    qcf.plotContourSP(X,Y,z,m,r,c,iterations_label)    
    
