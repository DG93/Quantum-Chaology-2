# -*- coding: utf-8 -*-
"""
Created on Tue Oct 13 14:03:57 2015

@author: mbyx9dl2
"""
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
from matplotlib import cm
from scipy import sparse
from mpl_toolkits.mplot3d import Axes3D
    
def I(i,j,C,c):
    I = 0
    l=0
    for k in range(0,j-1):
        I=I+C[k]
        l=k+1
    I=I+i-(c-C[l])//2
    return I
    
def ij(I,C,c):
    k=0
    while I-C[k]>=0:
        I=I-C[k]
        k=k+1
    j=k+1
    i=I+(c-C[k])//2
    return i,j
    
def createEmap(xmap,ymap,r,c):
    emap=[]
    for i in range(0,len(xmap)):
        a=xmap[i]
        b=ymap[i]
        if a==c: emap.append(1)
        elif b==r: emap.append(2)
        elif b==1: emap.append(3)
        elif a==1: emap.append(4)
        # Add in boundaries
        elif a==c-1: emap.append(5)
        elif b==r-1: emap.append(5)
        elif a==2: emap.append(5)
        elif b==2: emap.append(5)
        else: emap.append(0)
    return emap
    
def CreateMap5(r,c):
    xmap=[]
    ymap=[]
    C=[]
    t=[]
    t1=[]
    t1.append(1)
    t1.append(1)
    t.append(t1)
    t2=[]
    t2.append(2)
    t2.append(1)
    t.append(t2)
    t3=[]
    t3.append(1)
    t3.append(2)
    t.append(t3)
    t4=[]
    t4.append(c)
    t4.append(1)
    t.append(t4)
    t5=[]
    t5.append(c-1)
    t5.append(1)
    t.append(t5)
    t6=[]
    t6.append(c)
    t6.append(2)
    t.append(t6)
    t7=[]
    t7.append(1)
    t7.append(r)
    t.append(t7)
    t8=[]
    t8.append(1)
    t8.append(r-1)
    t.append(t8)
    t9=[]
    t9.append(2)
    t9.append(r)
    t.append(t9)
    t10=[]
    t10.append(c)
    t10.append(r)
    t.append(t10)
    t11=[]
    t11.append(c-1)
    t11.append(r)
    t.append(t11)
    t12=[]
    t12.append(c)
    t12.append(r-1)
    t.append(t12)
    for i in range(1,r+1):
        col_count = 0
        for j in range(1,c+1):
            test=[]
            test.append(i)
            test.append(j)
            if test not in t:
                ymap.append(j)
                xmap.append(i)
                col_count=col_count+1
        C.append(col_count)
    return C,xmap,ymap
    
def genMatrix(i,j):
    M = []
    for marker in range(0,len(i)):
        R=[None]*len(i)
        for k in range(0, len(i)):
            if marker == 0:
                if k == marker:
                    R[k] = 4.
                elif (i[k] == i[marker]+1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]+1):
                    R[k] = -1
                else:
                    R[k] = 0                    
            elif marker == (len(i)-1):
                if k == marker:
                    R[k] = 4
                elif (i[k] == i[marker]-1 and j[k] == j[marker]):
                    R[k] = -1        
                elif (i[k] == i[marker] and j[k] == j[marker]-1):
                    R[k] = -1
                else:
                    R[k] = 0                    
            else:
                if k == marker:
                    R[k] = 4
                elif (i[k] == i[marker]+1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker]-1 and j[k] == j[marker]):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]+1):
                    R[k] = -1
                elif (i[k] == i[marker] and j[k] == j[marker]-1):
                    R[k] = -1
                else:
                    R[k] = 0
        M.append(R)
    M = np.array(M)
    return M

def genMatrix5(i,j,emap,C,c,sparseflag):
    M = []
    for marker in range(0,len(i)):
        R=[0]*len(i)
        for k in range(0, len(i)):
            if marker == 0:
                if k == marker:
                    R[k] += 30.
                elif (i[k] == i[marker]+1 and j[k] == j[marker]):
                    R[k] += -16
                elif (i[k] == i[marker] and j[k] == j[marker]+1):
                    R[k] += -16
                elif (i[k] == i[marker]+2 and j[k] == j[marker]):
                    R[k] += 1
                elif (i[k] == i[marker] and j[k] == j[marker]+2):
                    R[k] += 1
                else:
                    R[k] += 0                    
            elif marker == (len(i)-1):
                if k == marker:
                    R[k] += 30
                elif (i[k] == i[marker]-1 and j[k] == j[marker]):
                    R[k] += -16        
                elif (i[k] == i[marker] and j[k] == j[marker]-1):
                    R[k] += -16
                elif (i[k] == i[marker]-2 and j[k] == j[marker]):
                    R[k] += 1        
                elif (i[k] == i[marker] and j[k] == j[marker]-2):
                    R[k] += 1
                else:
                    R[k] += 0                    
            else:
                if k == marker:
                    R[k] += 30
                elif (i[k] == i[marker]+1 and j[k] == j[marker]):
                    R[k] += -16
                elif (i[k] == i[marker]-1 and j[k] == j[marker]):
                    R[k] += -16
                elif (i[k] == i[marker] and j[k] == j[marker]+1):
                    R[k] += -16
                elif (i[k] == i[marker] and j[k] == j[marker]-1):
                    R[k] += -16
                elif (i[k] == i[marker]+2 and j[k] == j[marker]):
                    R[k] += 1
                elif (i[k] == i[marker]-2 and j[k] == j[marker]):
                    R[k] += 1
                elif (i[k] == i[marker] and j[k] == j[marker]+2):
                    R[k] += 1
                elif (i[k] == i[marker] and j[k] == j[marker]-2):
                    R[k] += 1
                else:
                    R[k] += 0
        M.append(R)
    M = np.array(M)
    # Add zeroes
    for k in range(0,len(emap)):
        if emap[k] != 0:
            for l in range(0,len(emap)):
                M[k,l] = 0
                M[l,k] = 0
    # Add -30's
    for k in range(0,len(emap)):
        i,j=ij(k,C,c)
        if emap[k]==1: 
            M[I(i,j-2,C,c),k]=-30
        elif emap[k]==2: 
            M[I(i-2,j,C,c),k]=-30
        elif emap[k]==3: 
            M[I(i+2,j,C,c),k]=-30
        elif emap[k]==4: 
            M[I(i,j+2,C,c),k]=-30
    N=0    
    if sparseflag == 1: 
        N = M.tolist()        
        N = sparse.csr_matrix(N)
    return M,N
        
def arrayFromZ(v, c, r):
    # Reshape the eigenvector
    z = v.reshape((r,c))
    # Add in boundary conditions
    z = np.insert(z,0,0, axis=1)
    z = np.insert(z,c+1,0, axis=1)
    z = np.insert(z, 0,0,axis=0)
    zero = np.zeros((1,c+2))
    z = np.append(z,zero, axis=0 )
    z = z*z
    return z
    
def arrayFromZ5(v, c, r, C, xt, yt):################# This needs to be redone!!!!!!!!!!!!!!
    Colsum = 0
    z=[None]*r
    for i in range(0,r):
        z[i] = (v[Colsum:Colsum+C[i]])
        Colsum = Colsum+C[i]
    z = np.array(z)
    zero = np.zeros(((r+2), (c+2)))
    for i in range(0,r):
        for j in range(0,C[i]): 
            np.put(zero[i+1], [(c+2-C[i])/2+j], z[i][j])
    z = zero*zero
    Ix=[]
    for i in range(0,r+2):
        Ix.append(sp.integrate.simps(z[i,:], x=xt))    
    I = sp.integrate.simps(Ix, x=yt)
    z=z/I
    return z
    
#######################################################################
    
def plotMap(xmap,ymap):
    fig = plt.figure(figsize=(15,15))
    plt.plot(xmap, ymap, 'ro')
    plt.title('Points', fontsize=30)
    plt.xlabel('$x$',fontsize=20)
    plt.ylabel('$y$',fontsize=20)
    plt.xlim(min(xmap)-1,max(xmap)+1)
    plt.ylim(min(ymap)-1,max(ymap)+1)
    plt.show()
    fig.savefig('Map.png')

def plot2Dpsi(X,Y,z):
    fig = plt.figure(figsize=(10,8))
    ax = fig.add_subplot(111, projection='3d')
    surf = ax.plot_surface(X,Y,z, cmap=cm.coolwarm, cstride=1, rstride=1)
    fig.colorbar(surf)
    plt.xlabel('$x_i$',fontsize=20)
    plt.ylabel('$y_i$',fontsize=20)
    ax.set_zlabel('$|\psi|^2$',fontsize=20)
    plt.legend()
    plt.show()
    fig.savefig('2Dwell.png')
    
def plotContour(X,Y,z,m):
    fig = plt.figure(figsize=(15,15))
    plt.contourf(X, Y, z, 100, cmap=cm.gist_rainbow)
    plt.title('Contour plot for energy level %i' %(m), fontsize=14)
    plt.xlabel('$x$',fontsize=20)
    plt.ylabel('$y$',fontsize=20)
    #plt.colorbar()
    plt.show()
    fig.savefig('Contour_%i.png' %(m))
    
def plotEnergies(nt, Ea, E1, E2):
    fig2 = plt.figure(figsize=(15,10))
    plt.plot(nt, Ea, label='Analytic')
    plt.plot(nt, E1, label='1st order')
    plt.plot(nt, E2, label='2nd order')
    plt.title('Energy vs n', fontsize=30)
    plt.xlabel('$n$',fontsize=20)
    plt.ylabel('$Energy$',fontsize=20)
    plt.legend()
    plt.show()
    fig2.savefig('2D_E_vs_n.png')
