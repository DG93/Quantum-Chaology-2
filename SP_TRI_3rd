# -*- coding: utf-8 -*-
"""
Created on Wed Sep 30 17:35:32 2015

2D Sierpinski Carpet
@author: Dan Goldsmith & Dan Locke
"""
import numpy as np
np.set_printoptions(threshold=np.nan)
from numpy import linalg
from scipy import sparse
import SP_TRIfn_3rd as SPfn
import time

t0 = time.clock()
Sparseflag = False
savedflag = True

# c and r must be 3^m
m = 4
a = 1
no_iterations = 3
UseSparseMatrices = False
sym_type=[1,1,1,1] # 1 is odd, 0 is even
qcf = SPfn.QC(m,a,no_iterations)      # create object    
qcf.CreateMap()                         # find which points lie inside
qcf.plotMap()
qcf.createEmap()
qcf.FillM()                         # generates lists of indices of borders
qcf.Symmetry(sym_type)                      # Depending on symmetry, choose which points to consider
qcf.CreateQs()
    
if savedflag == False:   
    H,Hs = qcf.genMatrix3(sym_type)
    N = len(qcf.Q[0])
    sH = np.zeros((N,N))
    H_sym=[]
    for I in range(0,N):
        for J in range(0,N):
                for i in qcf.sym_ind:
                    for j in qcf.sym_ind:  
                        sH[I,J] = sH[I,J]+H[qcf.Q[i][I],qcf.Q[j][J]] / qcf.deltaQRTR(i,I,j,J)
                        if i == qcf.sym_ind[-1] and j == qcf.sym_ind[-1]:
                            if (qcf.Q[i][I] not in qcf.M_sym) and (qcf.Q[j][J] not in qcf.M_sym): 
                                H_sym.append(sH[I,J])
                            #else: H_sym.append(0)
    
    shape = ( np.sqrt(len(H_sym)), np.sqrt(len(H_sym)) ) 
    H=np.reshape( H_sym, shape)
    
    if UseSparseMatrices == True:
         k = qcf.c
         w, v = sparse.linalg.eigsh(Hs, k, which = 'SM')
    
    if UseSparseMatrices == False:
        w, v = linalg.eigh(H)
    
    np.savetxt('evectors_%s' %no_iterations, v)
    np.savetxt('evalues_%s' %no_iterations, w)

else:
    v = np.loadtxt('evectors_%s' %no_iterations)
    w = np.loadtxt('evalues_%s' %no_iterations)
    

# For 1 iterations   
E=[]
n = len(w)
X, Y = np.meshgrid(qcf.xt, qcf.yt)
for m in range(0,1):    
    state_ind = sorted(enumerate(w), key=lambda x: x[1])[m][0]
    z = qcf.arrayFromZ(v[:,state_ind], qcf.xt, qcf.yt)
    e=(w[state_ind]/360)
    E.append(e)
#    if m==0:
    qcf.plotContour(X,Y,z,m)
    qcf.plotDensity(X,Y,z,m)
    
#nt = np.linspace(0,n-1,n)
#qcf.plotEnergies(n, nt, E)
#
#for i in range(1,9):
#    polyN = np.poly1d(np.polyfit(E, nt, i))
#    #qcf.plotN(E, polyN, nt)
#    qcf.plotPolyN(nt, polyN, E, i)
#    qcf.plotDelta(nt, polyN, E, i)
#    
## Delta-3 Statistic
#delta3 = qcf.delta3(E, nt, polyN)
#qcf.plotDelta3(delta3)

# For all iterations
#V=[]    
#W=[]
#for i in range(0,no_iterations+1):
#    v = np.loadtxt('evectors_%s' %i)
#    w = np.loadtxt('evalues_%s' %i)
#    V.append(v)
#    W.append(w)
#    
#E=[]
#X, Y = np.meshgrid(qcf.xt, qcf.yt)
#n=min(len(W[0]),len(W[1]),len(W[2]),len(W[3]))
#for i in range(0,no_iterations+1):
#    Etemp=[]
#    w=W[i]
#    for m in range(0,n):    
#        state_ind = sorted(enumerate(w), key=lambda x: x[1])[m][0]
#        e=(w[state_ind]/360)
#        Etemp.append(e)
#    E.append(Etemp)
#
#
#nt = np.linspace(0,n-1,n)
#qcf.plotAllEnergies(nt, E)
#polyN=[]
#for  i in range(0,no_iterations+1):
#    polyN.append(np.poly1d(np.polyfit(E[i], nt, 5)))
#qcf.plotAllN(E, polyN, nt)
#qcf.plotAllPolyN(nt, polyN, E)
#cAll, c_errAll = qcf.plotAllDelta(nt, polyN, E)
#delta3 = qcf.delta3All(E, nt, polyN)
#qcf.plotAllDelta3(delta3)
#qcf.plotb(cAll, c_errAll)

comp_time = (time.clock()-t0)/60.0
print("Time taken: %f mins" %comp_time)
