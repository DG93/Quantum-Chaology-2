# -*- coding: utf-8 -*-
"""
Created on Wed Sep 30 17:35:32 2015

2D infinite potential wells
@author: Dan Goldsmith & Dan Locke
"""
import numpy as np
import scipy as sp
from numpy import linalg
from scipy import sparse
import matplotlib.pyplot as plt
import scipy.constants as sc
import scipy.integrate
import QCFn2nd as qcf

Sparseflag = False
m = 3
c =3**m #int(input("Enter number of points in x axis: "))
r = c #int(input("Enter number points in y axis: "))
a = 1 # spacing in x axis
b=a # spacing in y axis
x=a*c #float(input("Enter width (x axis) of well: "))
y=b*r #float(input("Enter depth (y axis) of well: "))
#n = r*c # only used for energies
xt = np.linspace(0,x,c+2)
yt = np.linspace(0,y,r+2)
X, Y = np.meshgrid(xt, yt)
xmap=[]
ymap=[]
C=[]
emap=[]
    
C,xmap,ymap=qcf.CreateMap5(r,c)

# Generate 1st order
xmap1=[]
ymap1=[]
r1=r-2
c1=c-2
x1=a*c1
y1=b*r1
xt1 = np.linspace(0,x1,c1+2)
yt1 = np.linspace(0,y1,r1+2)
X1, Y1 = np.meshgrid(xt1, yt1)
for i in range(1,r1+1):
    for j in range(1,c1+1):
        ymap1.append(j)
        xmap1.append(i)
    
# Create emap
emap = qcf.createEmap(xmap,ymap,r,c)
#print(emap)

#qcf.plotMap(xmap,ymap)
W1=qcf.genMatrix(xmap1,ymap1)
W=qcf.genMatrix5(xmap,ymap,emap,C,c,Sparseflag)

w1,v1 = linalg.eig(W1)

if Sparseflag == False:
    w, v = linalg.eig(W)
if Sparseflag == True:
    k = 15
    w, v = sparse.linalg.eigsh(W,k,which='SM')

Ea=[]
E1=[]
E2=[]
# enumerate list and sort by eigenvalues, return index of relevant energy level
# here m labels mth energy level (in sorted list of energies)
for m in range(0,100):
    state_ind = sorted(enumerate(w), key=lambda x: x[1])[m][0]
    z = qcf.arrayFromZ5(v[:,state_ind], c, r, C, xt, yt)
    #qcf.plotContour(X,Y,z,m)
    state_ind1 = sorted(enumerate(w1), key=lambda x: x[1])[m][0]
    z1 = qcf.arrayFromZ(v1[:,state_ind1], c1, r1)
    #qcf.plotContour(X1,Y1,z1,m)
    e2 = ((w[state_ind]+4)/10)#-min(w))/10)
    e1 = (w1[state_ind1]/2)
    E1.append(e1)
    E2.append(e2)

width = max(xmap1)
spacing = a
for nx in range(0,10):
    for ny in range(0,10):
        ea = (((np.pi**2)*(spacing**2))/2)*((((nx)**2)/width**2)+(((ny)**2)/width**2))
        Ea.append(ea)
Ea=sorted(Ea)    

#print("Energy level | Analytic | 1st | 2nd")
#for i in range(0,len(Ea)):
#    print(i,Ea[i],E1[i],E2[i])

n=len(Ea)
nt = np.linspace(0,n-1,n)
qcf.plotEnergies(nt, Ea, E1[0:len(Ea)], E2[0:len(Ea)])
